2023/09/29 11:48:17 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.8.16 (default, Mar  2 2023, 03:21:46) [GCC 11.2.0]
    CUDA available: False
    numpy_random_seed: 1482765663
    GCC: gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0
    PyTorch: 2.0.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.7.3 (Git Hash 6dbeffbae1f23cbbeae17adb7b5b13f1f37c080e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=ON, TORCH_VERSION=2.0.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.15.2
    OpenCV: 4.7.0
    MMEngine: 0.8.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 1482765663
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2023/09/29 11:48:22 - mmengine - INFO - Config:
_backend_args = None
_multiscale_resize_transforms = [
    dict(
        transforms=[
            dict(scale=(
                640,
                640,
            ), type='YOLOv5KeepRatioResize'),
            dict(
                allow_scale_up=False,
                pad_val=dict(img=114),
                scale=(
                    640,
                    640,
                ),
                type='LetterResize'),
        ],
        type='Compose'),
    dict(
        transforms=[
            dict(scale=(
                320,
                320,
            ), type='YOLOv5KeepRatioResize'),
            dict(
                allow_scale_up=False,
                pad_val=dict(img=114),
                scale=(
                    320,
                    320,
                ),
                type='LetterResize'),
        ],
        type='Compose'),
    dict(
        transforms=[
            dict(scale=(
                960,
                960,
            ), type='YOLOv5KeepRatioResize'),
            dict(
                allow_scale_up=False,
                pad_val=dict(img=114),
                scale=(
                    960,
                    960,
                ),
                type='LetterResize'),
        ],
        type='Compose'),
]
affine_scale = 0.5
albu_train_transforms = [
    dict(p=0.01, type='Blur'),
    dict(p=0.01, type='MedianBlur'),
    dict(p=0.01, type='ToGray'),
    dict(p=0.01, type='CLAHE'),
]
backend_args = None
base_lr = 0.01
batch_shapes_cfg = None
close_mosaic_epochs = 10
custom_hooks = [
    dict(
        ema_type='ExpMomentumEMA',
        momentum=0.0001,
        priority=49,
        strict_load=False,
        type='EMAHook',
        update_buffers=True),
    dict(
        switch_epoch=490,
        switch_pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(scale=(
                640,
                640,
            ), type='YOLOv5KeepRatioResize'),
            dict(
                allow_scale_up=True,
                pad_val=dict(img=114.0),
                scale=(
                    640,
                    640,
                ),
                type='LetterResize'),
            dict(
                border_val=(
                    114,
                    114,
                    114,
                ),
                max_aspect_ratio=100,
                max_rotate_degree=0.0,
                max_shear_degree=0.0,
                scaling_ratio_range=(
                    0.5,
                    1.5,
                ),
                type='YOLOv5RandomAffine'),
            dict(
                bbox_params=dict(
                    format='pascal_voc',
                    label_fields=[
                        'gt_bboxes_labels',
                        'gt_ignore_flags',
                    ],
                    type='BboxParams'),
                keymap=dict(gt_bboxes='bboxes', img='image'),
                transforms=[
                    dict(p=0.01, type='Blur'),
                    dict(p=0.01, type='MedianBlur'),
                    dict(p=0.01, type='ToGray'),
                    dict(p=0.01, type='CLAHE'),
                ],
                type='mmdet.Albu'),
            dict(type='YOLOv5HSVRandomAug'),
            dict(prob=0.5, type='mmdet.RandomFlip'),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'flip',
                    'flip_direction',
                ),
                type='mmdet.PackDetInputs'),
        ],
        type='mmdet.PipelineSwitchHook'),
    dict(type='MySelfExpHook'),
]
custom_imports = dict(
    allow_failed_imports=False,
    imports=[
        'leaf_model_tools.hooks',
        'leaf_model_tools.AFPN',
    ])
data_root = '/home/neau/trainset/crop_leafs_dataset'
dataset_type = 'YOLOv5CocoDataset'
deepen_factor = 0.33
default_hooks = dict(
    checkpoint=dict(
        interval=10,
        max_keep_ckpts=2,
        save_best='auto',
        save_param_scheduler=False,
        type='CheckpointHook'),
    logger=dict(interval=50, type='LoggerHook'),
    param_scheduler=dict(
        lr_factor=0.01,
        max_epochs=500,
        scheduler_type='linear',
        type='YOLOv5ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='mmdet.DetVisualizationHook'))
default_scope = 'mmyolo'
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_scale = (
    640,
    640,
)
img_scales = [
    (
        640,
        640,
    ),
    (
        320,
        320,
    ),
    (
        960,
        960,
    ),
]
last_stage_out_channels = 1024
last_transform = [
    dict(
        bbox_params=dict(
            format='pascal_voc',
            label_fields=[
                'gt_bboxes_labels',
                'gt_ignore_flags',
            ],
            type='BboxParams'),
        keymap=dict(gt_bboxes='bboxes', img='image'),
        transforms=[
            dict(p=0.01, type='Blur'),
            dict(p=0.01, type='MedianBlur'),
            dict(p=0.01, type='ToGray'),
            dict(p=0.01, type='CLAHE'),
        ],
        type='mmdet.Albu'),
    dict(type='YOLOv5HSVRandomAug'),
    dict(prob=0.5, type='mmdet.RandomFlip'),
    dict(
        meta_keys=(
            'img_id',
            'img_path',
            'ori_shape',
            'img_shape',
            'flip',
            'flip_direction',
        ),
        type='mmdet.PackDetInputs'),
]
launcher = 'none'
load_from = '/home/neau/sdb/ag-pro/leaf_model/checkpoint/yolov8_s_syncbn_fast_8xb16-500e_coco_20230117_180101-5aa5f0f1.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=True, type='LogProcessor', window_size=50)
loss_bbox_weight = 7.5
loss_cls_weight = 0.5
loss_dfl_weight = 0.375
lr_factor = 0.01
max_aspect_ratio = 100
max_epochs = 500
max_keep_ckpts = 2
metainfo = dict(classes=(
    'round',
    'sharp',
))
model = dict(
    backbone=dict(
        act_cfg=dict(inplace=True, type='SiLU'),
        arch='P5',
        deepen_factor=0.33,
        last_stage_out_channels=1024,
        norm_cfg=dict(eps=0.001, momentum=0.03, type='BN'),
        type='YOLOv8CSPDarknet',
        widen_factor=0.5),
    bbox_head=dict(
        bbox_coder=dict(type='DistancePointBBoxCoder'),
        head_module=dict(
            act_cfg=dict(inplace=True, type='SiLU'),
            featmap_strides=[
                8,
                16,
                32,
            ],
            in_channels=[
                256,
                512,
                1024,
            ],
            norm_cfg=dict(eps=0.001, momentum=0.03, type='BN'),
            num_classes=2,
            reg_max=16,
            type='YOLOv8HeadModule',
            widen_factor=0.5),
        loss_bbox=dict(
            bbox_format='xyxy',
            iou_mode='ciou',
            loss_weight=7.5,
            reduction='sum',
            return_iou=False,
            type='IoULoss'),
        loss_cls=dict(
            loss_weight=0.5,
            reduction='none',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        loss_dfl=dict(
            loss_weight=0.375,
            reduction='mean',
            type='mmdet.DistributionFocalLoss'),
        prior_generator=dict(
            offset=0.5, strides=[
                8,
                16,
                32,
            ], type='mmdet.MlvlPointGenerator'),
        type='YOLOv8Head'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        mean=[
            0.0,
            0.0,
            0.0,
        ],
        std=[
            255.0,
            255.0,
            255.0,
        ],
        type='YOLOv5DetDataPreprocessor'),
    neck=dict(
        act_cfg=dict(inplace=True, type='SiLU'),
        deepen_factor=0.33,
        in_channels=[
            256,
            512,
            1024,
        ],
        norm_cfg=dict(eps=0.001, momentum=0.03, type='BN'),
        num_csp_blocks=3,
        out_channels=[
            256,
            512,
            1024,
        ],
        type='YOLOv8PAFPN',
        widen_factor=0.5),
    test_cfg=dict(
        max_per_img=300,
        multi_label=True,
        nms=dict(iou_threshold=0.7, type='nms'),
        nms_pre=30000,
        score_thr=0.001),
    train_cfg=dict(
        assigner=dict(
            alpha=0.5,
            beta=6.0,
            eps=1e-09,
            num_classes=2,
            topk=10,
            type='BatchTaskAlignedAssigner',
            use_ciou=True)),
    type='YOLODetector')
model_test_cfg = dict(
    max_per_img=300,
    multi_label=True,
    nms=dict(iou_threshold=0.7, type='nms'),
    nms_pre=30000,
    score_thr=0.001)
norm_cfg = dict(eps=0.001, momentum=0.03, type='BN')
num_classes = 80
num_det_layers = 3
optim_wrapper = dict(
    clip_grad=dict(max_norm=10.0),
    constructor='YOLOv5OptimizerConstructor',
    optimizer=dict(
        batch_size_per_gpu=2,
        lr=0.01,
        momentum=0.937,
        nesterov=True,
        type='SGD',
        weight_decay=0.0005),
    type='OptimWrapper')
param_scheduler = None
persistent_workers = True
pre_transform = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
]
project_name = 'yolov8-s'
resume = False
save_epoch_intervals = 10
strides = [
    8,
    16,
    32,
]
tal_alpha = 0.5
tal_beta = 6.0
tal_topk = 10
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='val_annotations.json',
        batch_shapes_cfg=None,
        data_prefix=dict(img='./'),
        data_root='/home/neau/trainset/crop_leafs_dataset',
        metainfo=dict(classes=(
            'round',
            'sharp',
        )),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(scale=(
                640,
                640,
            ), type='YOLOv5KeepRatioResize'),
            dict(
                allow_scale_up=False,
                pad_val=dict(img=114),
                scale=(
                    640,
                    640,
                ),
                type='LetterResize'),
            dict(_scope_='mmdet', type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                    'pad_param',
                ),
                type='mmdet.PackDetInputs'),
        ],
        test_mode=True,
        type='YOLOv5CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    pin_memory=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    ann_file='/home/neau/trainset/crop_leafs_dataset/val_annotations.json',
    metric='bbox',
    proposal_nums=(
        100,
        300,
        1000,
    ),
    type='mmdet.CocoMetric')
test_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(scale=(
        640,
        640,
    ), type='YOLOv5KeepRatioResize'),
    dict(
        allow_scale_up=False,
        pad_val=dict(img=114),
        scale=(
            640,
            640,
        ),
        type='LetterResize'),
    dict(_scope_='mmdet', type='LoadAnnotations', with_bbox=True),
    dict(
        meta_keys=(
            'img_id',
            'img_path',
            'ori_shape',
            'img_shape',
            'scale_factor',
            'pad_param',
        ),
        type='mmdet.PackDetInputs'),
]
train_ann_file = 'annotations/instances_train2017.json'
train_batch_size_per_gpu = 2
train_cfg = dict(
    dynamic_intervals=[
        (
            490,
            1,
        ),
    ],
    max_epochs=500,
    type='EpochBasedTrainLoop',
    val_interval=10)
train_data_prefix = 'train2017/'
train_dataloader = dict(
    batch_size=1,
    collate_fn=dict(type='yolov5_collate'),
    dataset=dict(
        ann_file='train_annotations.json',
        data_prefix=dict(img='./'),
        data_root='/home/neau/trainset/crop_leafs_dataset',
        filter_cfg=dict(filter_empty_gt=False, min_size=32),
        metainfo=dict(classes=(
            'round',
            'sharp',
        )),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                img_scale=(
                    640,
                    640,
                ),
                pad_val=114.0,
                pre_transform=[
                    dict(backend_args=None, type='LoadImageFromFile'),
                    dict(type='LoadAnnotations', with_bbox=True),
                ],
                type='Mosaic'),
            dict(
                border=(
                    -320,
                    -320,
                ),
                border_val=(
                    114,
                    114,
                    114,
                ),
                max_aspect_ratio=100,
                max_rotate_degree=0.0,
                max_shear_degree=0.0,
                scaling_ratio_range=(
                    0.5,
                    1.5,
                ),
                type='YOLOv5RandomAffine'),
            dict(
                bbox_params=dict(
                    format='pascal_voc',
                    label_fields=[
                        'gt_bboxes_labels',
                        'gt_ignore_flags',
                    ],
                    type='BboxParams'),
                keymap=dict(gt_bboxes='bboxes', img='image'),
                transforms=[
                    dict(p=0.01, type='Blur'),
                    dict(p=0.01, type='MedianBlur'),
                    dict(p=0.01, type='ToGray'),
                    dict(p=0.01, type='CLAHE'),
                ],
                type='mmdet.Albu'),
            dict(type='YOLOv5HSVRandomAug'),
            dict(prob=0.5, type='mmdet.RandomFlip'),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'flip',
                    'flip_direction',
                ),
                type='mmdet.PackDetInputs'),
        ],
        type='YOLOv5CocoDataset'),
    num_workers=4,
    persistent_workers=True,
    pin_memory=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_num_workers = 8
train_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        img_scale=(
            640,
            640,
        ),
        pad_val=114.0,
        pre_transform=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
        ],
        type='Mosaic'),
    dict(
        border=(
            -320,
            -320,
        ),
        border_val=(
            114,
            114,
            114,
        ),
        max_aspect_ratio=100,
        max_rotate_degree=0.0,
        max_shear_degree=0.0,
        scaling_ratio_range=(
            0.5,
            1.5,
        ),
        type='YOLOv5RandomAffine'),
    dict(
        bbox_params=dict(
            format='pascal_voc',
            label_fields=[
                'gt_bboxes_labels',
                'gt_ignore_flags',
            ],
            type='BboxParams'),
        keymap=dict(gt_bboxes='bboxes', img='image'),
        transforms=[
            dict(p=0.01, type='Blur'),
            dict(p=0.01, type='MedianBlur'),
            dict(p=0.01, type='ToGray'),
            dict(p=0.01, type='CLAHE'),
        ],
        type='mmdet.Albu'),
    dict(type='YOLOv5HSVRandomAug'),
    dict(prob=0.5, type='mmdet.RandomFlip'),
    dict(
        meta_keys=(
            'img_id',
            'img_path',
            'ori_shape',
            'img_shape',
            'flip',
            'flip_direction',
        ),
        type='mmdet.PackDetInputs'),
]
train_pipeline_stage2 = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(scale=(
        640,
        640,
    ), type='YOLOv5KeepRatioResize'),
    dict(
        allow_scale_up=True,
        pad_val=dict(img=114.0),
        scale=(
            640,
            640,
        ),
        type='LetterResize'),
    dict(
        border_val=(
            114,
            114,
            114,
        ),
        max_aspect_ratio=100,
        max_rotate_degree=0.0,
        max_shear_degree=0.0,
        scaling_ratio_range=(
            0.5,
            1.5,
        ),
        type='YOLOv5RandomAffine'),
    dict(
        bbox_params=dict(
            format='pascal_voc',
            label_fields=[
                'gt_bboxes_labels',
                'gt_ignore_flags',
            ],
            type='BboxParams'),
        keymap=dict(gt_bboxes='bboxes', img='image'),
        transforms=[
            dict(p=0.01, type='Blur'),
            dict(p=0.01, type='MedianBlur'),
            dict(p=0.01, type='ToGray'),
            dict(p=0.01, type='CLAHE'),
        ],
        type='mmdet.Albu'),
    dict(type='YOLOv5HSVRandomAug'),
    dict(prob=0.5, type='mmdet.RandomFlip'),
    dict(
        meta_keys=(
            'img_id',
            'img_path',
            'ori_shape',
            'img_shape',
            'flip',
            'flip_direction',
        ),
        type='mmdet.PackDetInputs'),
]
tta_model = dict(
    tta_cfg=dict(max_per_img=300, nms=dict(iou_threshold=0.65, type='nms')),
    type='mmdet.DetTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(
                    transforms=[
                        dict(scale=(
                            640,
                            640,
                        ), type='YOLOv5KeepRatioResize'),
                        dict(
                            allow_scale_up=False,
                            pad_val=dict(img=114),
                            scale=(
                                640,
                                640,
                            ),
                            type='LetterResize'),
                    ],
                    type='Compose'),
                dict(
                    transforms=[
                        dict(scale=(
                            320,
                            320,
                        ), type='YOLOv5KeepRatioResize'),
                        dict(
                            allow_scale_up=False,
                            pad_val=dict(img=114),
                            scale=(
                                320,
                                320,
                            ),
                            type='LetterResize'),
                    ],
                    type='Compose'),
                dict(
                    transforms=[
                        dict(scale=(
                            960,
                            960,
                        ), type='YOLOv5KeepRatioResize'),
                        dict(
                            allow_scale_up=False,
                            pad_val=dict(img=114),
                            scale=(
                                960,
                                960,
                            ),
                            type='LetterResize'),
                    ],
                    type='Compose'),
            ],
            [
                dict(prob=1.0, type='mmdet.RandomFlip'),
                dict(prob=0.0, type='mmdet.RandomFlip'),
            ],
            [
                dict(type='mmdet.LoadAnnotations', with_bbox=True),
            ],
            [
                dict(
                    meta_keys=(
                        'img_id',
                        'img_path',
                        'ori_shape',
                        'img_shape',
                        'scale_factor',
                        'pad_param',
                        'flip',
                        'flip_direction',
                    ),
                    type='mmdet.PackDetInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_ann_file = 'annotations/instances_val2017.json'
val_batch_size_per_gpu = 1
val_cfg = dict(type='ValLoop')
val_data_prefix = 'val2017/'
val_dataloader = dict(
    batch_size=2,
    dataset=dict(
        ann_file='val_annotations.json',
        batch_shapes_cfg=None,
        data_prefix=dict(img='./'),
        data_root='/home/neau/trainset/crop_leafs_dataset',
        metainfo=dict(classes=(
            'round',
            'sharp',
        )),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(scale=(
                640,
                640,
            ), type='YOLOv5KeepRatioResize'),
            dict(
                allow_scale_up=False,
                pad_val=dict(img=114),
                scale=(
                    640,
                    640,
                ),
                type='LetterResize'),
            dict(_scope_='mmdet', type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                    'pad_param',
                ),
                type='mmdet.PackDetInputs'),
        ],
        test_mode=True,
        type='YOLOv5CocoDataset'),
    drop_last=False,
    num_workers=4,
    persistent_workers=True,
    pin_memory=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    ann_file='/home/neau/trainset/crop_leafs_dataset/val_annotations.json',
    metric='bbox',
    proposal_nums=(
        100,
        300,
        1000,
    ),
    type='mmdet.CocoMetric')
val_interval_stage2 = 1
val_num_workers = 2
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer', type='mmdet.DetLocalVisualizer', vis_backends=[])
weight_decay = 0.0005
widen_factor = 0.5
work_dir = './work_dirs/yolov8-s'

2023/09/29 11:48:22 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2023/09/29 11:48:22 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(49          ) EMAHook                            
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_load_checkpoint:
(49          ) EMAHook                            
 -------------------- 
before_train:
(9           ) YOLOv5ParamSchedulerHook           
(VERY_HIGH   ) RuntimeInfoHook                    
(49          ) EMAHook                            
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
(NORMAL      ) PipelineSwitchHook                 
 -------------------- 
before_train_iter:
(9           ) YOLOv5ParamSchedulerHook           
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(9           ) YOLOv5ParamSchedulerHook           
(VERY_HIGH   ) RuntimeInfoHook                    
(49          ) EMAHook                            
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(9           ) YOLOv5ParamSchedulerHook           
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(49          ) EMAHook                            
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(9           ) YOLOv5ParamSchedulerHook           
(VERY_HIGH   ) RuntimeInfoHook                    
(49          ) EMAHook                            
(NORMAL      ) IterTimerHook                      
(NORMAL      ) MySelfExpHook                      
(BELOW_NORMAL) LoggerHook                         
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_save_checkpoint:
(49          ) EMAHook                            
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) MySelfExpHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(49          ) EMAHook                            
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(49          ) EMAHook                            
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2023/09/29 11:48:27 - mmengine - INFO - Optimizer groups: 83 .bias, 83 conv.weight, 77 other
Name of parameter - Initialization information

backbone.stem.conv.weight - torch.Size([32, 3, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOv8CSPDarknet  

backbone.stem.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stem.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage1.0.conv.weight - torch.Size([64, 32, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOv8CSPDarknet  

backbone.stage1.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage1.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage1.1.main_conv.conv.weight - torch.Size([64, 64, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv8CSPDarknet  

backbone.stage1.1.main_conv.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage1.1.main_conv.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage1.1.final_conv.conv.weight - torch.Size([64, 96, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv8CSPDarknet  

backbone.stage1.1.final_conv.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage1.1.final_conv.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage1.1.blocks.0.conv1.depthwise_conv.conv.weight - torch.Size([32, 1, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOv8CSPDarknet  

backbone.stage1.1.blocks.0.conv1.depthwise_conv.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage1.1.blocks.0.conv1.depthwise_conv.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage1.1.blocks.0.conv1.pointwise_conv.conv.weight - torch.Size([32, 32, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv8CSPDarknet  

backbone.stage1.1.blocks.0.conv1.pointwise_conv.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage1.1.blocks.0.conv1.pointwise_conv.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage1.1.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([32, 1, 5, 5]): 
Initialized by user-defined `init_weights` in YOLOv8CSPDarknet  

backbone.stage1.1.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage1.1.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage1.1.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([32, 32, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv8CSPDarknet  

backbone.stage1.1.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage1.1.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage2.0.conv.weight - torch.Size([128, 64, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOv8CSPDarknet  

backbone.stage2.0.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage2.0.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage2.1.main_conv.conv.weight - torch.Size([128, 128, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv8CSPDarknet  

backbone.stage2.1.main_conv.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage2.1.main_conv.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage2.1.final_conv.conv.weight - torch.Size([128, 256, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv8CSPDarknet  

backbone.stage2.1.final_conv.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage2.1.final_conv.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage2.1.blocks.0.conv1.depthwise_conv.conv.weight - torch.Size([64, 1, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOv8CSPDarknet  

backbone.stage2.1.blocks.0.conv1.depthwise_conv.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage2.1.blocks.0.conv1.depthwise_conv.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage2.1.blocks.0.conv1.pointwise_conv.conv.weight - torch.Size([64, 64, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv8CSPDarknet  

backbone.stage2.1.blocks.0.conv1.pointwise_conv.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage2.1.blocks.0.conv1.pointwise_conv.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage2.1.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([64, 1, 5, 5]): 
Initialized by user-defined `init_weights` in YOLOv8CSPDarknet  

backbone.stage2.1.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage2.1.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage2.1.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([64, 64, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv8CSPDarknet  

backbone.stage2.1.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage2.1.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage2.1.blocks.1.conv1.depthwise_conv.conv.weight - torch.Size([64, 1, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOv8CSPDarknet  

backbone.stage2.1.blocks.1.conv1.depthwise_conv.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage2.1.blocks.1.conv1.depthwise_conv.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage2.1.blocks.1.conv1.pointwise_conv.conv.weight - torch.Size([64, 64, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv8CSPDarknet  

backbone.stage2.1.blocks.1.conv1.pointwise_conv.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage2.1.blocks.1.conv1.pointwise_conv.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage2.1.blocks.1.conv2.depthwise_conv.conv.weight - torch.Size([64, 1, 5, 5]): 
Initialized by user-defined `init_weights` in YOLOv8CSPDarknet  

backbone.stage2.1.blocks.1.conv2.depthwise_conv.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage2.1.blocks.1.conv2.depthwise_conv.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage2.1.blocks.1.conv2.pointwise_conv.conv.weight - torch.Size([64, 64, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv8CSPDarknet  

backbone.stage2.1.blocks.1.conv2.pointwise_conv.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage2.1.blocks.1.conv2.pointwise_conv.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage3.0.conv.weight - torch.Size([256, 128, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOv8CSPDarknet  

backbone.stage3.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage3.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage3.1.main_conv.conv.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv8CSPDarknet  

backbone.stage3.1.main_conv.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage3.1.main_conv.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage3.1.final_conv.conv.weight - torch.Size([256, 512, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv8CSPDarknet  

backbone.stage3.1.final_conv.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage3.1.final_conv.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage3.1.blocks.0.conv1.depthwise_conv.conv.weight - torch.Size([128, 1, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOv8CSPDarknet  

backbone.stage3.1.blocks.0.conv1.depthwise_conv.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage3.1.blocks.0.conv1.depthwise_conv.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage3.1.blocks.0.conv1.pointwise_conv.conv.weight - torch.Size([128, 128, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv8CSPDarknet  

backbone.stage3.1.blocks.0.conv1.pointwise_conv.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage3.1.blocks.0.conv1.pointwise_conv.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage3.1.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([128, 1, 5, 5]): 
Initialized by user-defined `init_weights` in YOLOv8CSPDarknet  

backbone.stage3.1.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage3.1.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage3.1.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([128, 128, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv8CSPDarknet  

backbone.stage3.1.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage3.1.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage3.1.blocks.1.conv1.depthwise_conv.conv.weight - torch.Size([128, 1, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOv8CSPDarknet  

backbone.stage3.1.blocks.1.conv1.depthwise_conv.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage3.1.blocks.1.conv1.depthwise_conv.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage3.1.blocks.1.conv1.pointwise_conv.conv.weight - torch.Size([128, 128, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv8CSPDarknet  

backbone.stage3.1.blocks.1.conv1.pointwise_conv.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage3.1.blocks.1.conv1.pointwise_conv.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage3.1.blocks.1.conv2.depthwise_conv.conv.weight - torch.Size([128, 1, 5, 5]): 
Initialized by user-defined `init_weights` in YOLOv8CSPDarknet  

backbone.stage3.1.blocks.1.conv2.depthwise_conv.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage3.1.blocks.1.conv2.depthwise_conv.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage3.1.blocks.1.conv2.pointwise_conv.conv.weight - torch.Size([128, 128, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv8CSPDarknet  

backbone.stage3.1.blocks.1.conv2.pointwise_conv.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage3.1.blocks.1.conv2.pointwise_conv.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage4.0.conv.weight - torch.Size([512, 256, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOv8CSPDarknet  

backbone.stage4.0.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage4.0.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage4.1.main_conv.conv.weight - torch.Size([512, 512, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv8CSPDarknet  

backbone.stage4.1.main_conv.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage4.1.main_conv.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage4.1.final_conv.conv.weight - torch.Size([512, 768, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv8CSPDarknet  

backbone.stage4.1.final_conv.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage4.1.final_conv.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage4.1.blocks.0.conv1.depthwise_conv.conv.weight - torch.Size([256, 1, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOv8CSPDarknet  

backbone.stage4.1.blocks.0.conv1.depthwise_conv.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage4.1.blocks.0.conv1.depthwise_conv.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage4.1.blocks.0.conv1.pointwise_conv.conv.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv8CSPDarknet  

backbone.stage4.1.blocks.0.conv1.pointwise_conv.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage4.1.blocks.0.conv1.pointwise_conv.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage4.1.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([256, 1, 5, 5]): 
Initialized by user-defined `init_weights` in YOLOv8CSPDarknet  

backbone.stage4.1.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage4.1.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage4.1.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv8CSPDarknet  

backbone.stage4.1.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage4.1.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage4.2.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv8CSPDarknet  

backbone.stage4.2.conv1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage4.2.conv1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage4.2.conv2.conv.weight - torch.Size([512, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv8CSPDarknet  

backbone.stage4.2.conv2.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage4.2.conv2.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.top_down_layers.0.0.main_conv.conv.weight - torch.Size([256, 768, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv8PAFPN  

neck.top_down_layers.0.0.main_conv.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.top_down_layers.0.0.main_conv.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.top_down_layers.0.0.final_conv.conv.weight - torch.Size([256, 384, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv8PAFPN  

neck.top_down_layers.0.0.final_conv.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.top_down_layers.0.0.final_conv.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.top_down_layers.0.0.blocks.0.conv1.depthwise_conv.conv.weight - torch.Size([128, 1, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOv8PAFPN  

neck.top_down_layers.0.0.blocks.0.conv1.depthwise_conv.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.top_down_layers.0.0.blocks.0.conv1.depthwise_conv.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.top_down_layers.0.0.blocks.0.conv1.pointwise_conv.conv.weight - torch.Size([128, 128, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv8PAFPN  

neck.top_down_layers.0.0.blocks.0.conv1.pointwise_conv.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.top_down_layers.0.0.blocks.0.conv1.pointwise_conv.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.top_down_layers.0.0.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([128, 1, 5, 5]): 
Initialized by user-defined `init_weights` in YOLOv8PAFPN  

neck.top_down_layers.0.0.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.top_down_layers.0.0.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.top_down_layers.0.0.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([128, 128, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv8PAFPN  

neck.top_down_layers.0.0.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.top_down_layers.0.0.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.top_down_layers.1.0.main_conv.conv.weight - torch.Size([128, 384, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv8PAFPN  

neck.top_down_layers.1.0.main_conv.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.top_down_layers.1.0.main_conv.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.top_down_layers.1.0.final_conv.conv.weight - torch.Size([128, 192, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv8PAFPN  

neck.top_down_layers.1.0.final_conv.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.top_down_layers.1.0.final_conv.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.top_down_layers.1.0.blocks.0.conv1.depthwise_conv.conv.weight - torch.Size([64, 1, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOv8PAFPN  

neck.top_down_layers.1.0.blocks.0.conv1.depthwise_conv.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.top_down_layers.1.0.blocks.0.conv1.depthwise_conv.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.top_down_layers.1.0.blocks.0.conv1.pointwise_conv.conv.weight - torch.Size([64, 64, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv8PAFPN  

neck.top_down_layers.1.0.blocks.0.conv1.pointwise_conv.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.top_down_layers.1.0.blocks.0.conv1.pointwise_conv.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.top_down_layers.1.0.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([64, 1, 5, 5]): 
Initialized by user-defined `init_weights` in YOLOv8PAFPN  

neck.top_down_layers.1.0.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.top_down_layers.1.0.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.top_down_layers.1.0.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([64, 64, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv8PAFPN  

neck.top_down_layers.1.0.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.top_down_layers.1.0.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.downsample_layers.0.conv.weight - torch.Size([128, 128, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOv8PAFPN  

neck.downsample_layers.0.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.downsample_layers.0.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.downsample_layers.1.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOv8PAFPN  

neck.downsample_layers.1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.downsample_layers.1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.bottom_up_layers.0.0.main_conv.conv.weight - torch.Size([256, 384, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv8PAFPN  

neck.bottom_up_layers.0.0.main_conv.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.bottom_up_layers.0.0.main_conv.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.bottom_up_layers.0.0.final_conv.conv.weight - torch.Size([256, 384, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv8PAFPN  

neck.bottom_up_layers.0.0.final_conv.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.bottom_up_layers.0.0.final_conv.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.bottom_up_layers.0.0.blocks.0.conv1.depthwise_conv.conv.weight - torch.Size([128, 1, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOv8PAFPN  

neck.bottom_up_layers.0.0.blocks.0.conv1.depthwise_conv.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.bottom_up_layers.0.0.blocks.0.conv1.depthwise_conv.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.bottom_up_layers.0.0.blocks.0.conv1.pointwise_conv.conv.weight - torch.Size([128, 128, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv8PAFPN  

neck.bottom_up_layers.0.0.blocks.0.conv1.pointwise_conv.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.bottom_up_layers.0.0.blocks.0.conv1.pointwise_conv.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.bottom_up_layers.0.0.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([128, 1, 5, 5]): 
Initialized by user-defined `init_weights` in YOLOv8PAFPN  

neck.bottom_up_layers.0.0.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.bottom_up_layers.0.0.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.bottom_up_layers.0.0.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([128, 128, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv8PAFPN  

neck.bottom_up_layers.0.0.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.bottom_up_layers.0.0.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.bottom_up_layers.1.0.main_conv.conv.weight - torch.Size([512, 768, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv8PAFPN  

neck.bottom_up_layers.1.0.main_conv.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.bottom_up_layers.1.0.main_conv.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.bottom_up_layers.1.0.final_conv.conv.weight - torch.Size([512, 768, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv8PAFPN  

neck.bottom_up_layers.1.0.final_conv.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.bottom_up_layers.1.0.final_conv.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.bottom_up_layers.1.0.blocks.0.conv1.depthwise_conv.conv.weight - torch.Size([256, 1, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOv8PAFPN  

neck.bottom_up_layers.1.0.blocks.0.conv1.depthwise_conv.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.bottom_up_layers.1.0.blocks.0.conv1.depthwise_conv.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.bottom_up_layers.1.0.blocks.0.conv1.pointwise_conv.conv.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv8PAFPN  

neck.bottom_up_layers.1.0.blocks.0.conv1.pointwise_conv.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.bottom_up_layers.1.0.blocks.0.conv1.pointwise_conv.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.bottom_up_layers.1.0.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([256, 1, 5, 5]): 
Initialized by user-defined `init_weights` in YOLOv8PAFPN  

neck.bottom_up_layers.1.0.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.bottom_up_layers.1.0.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.bottom_up_layers.1.0.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv8PAFPN  

neck.bottom_up_layers.1.0.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.bottom_up_layers.1.0.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.cls_preds.0.0.conv.weight - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.cls_preds.0.0.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.cls_preds.0.0.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.cls_preds.0.1.conv.weight - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.cls_preds.0.1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.cls_preds.0.1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.cls_preds.0.2.weight - torch.Size([2, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.cls_preds.0.2.bias - torch.Size([2]): 
Initialized by user-defined `init_weights` in YOLOv8HeadModule  

bbox_head.head_module.cls_preds.1.0.conv.weight - torch.Size([128, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.cls_preds.1.0.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.cls_preds.1.0.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.cls_preds.1.1.conv.weight - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.cls_preds.1.1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.cls_preds.1.1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.cls_preds.1.2.weight - torch.Size([2, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.cls_preds.1.2.bias - torch.Size([2]): 
Initialized by user-defined `init_weights` in YOLOv8HeadModule  

bbox_head.head_module.cls_preds.2.0.conv.weight - torch.Size([128, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.cls_preds.2.0.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.cls_preds.2.0.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.cls_preds.2.1.conv.weight - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.cls_preds.2.1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.cls_preds.2.1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.cls_preds.2.2.weight - torch.Size([2, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.cls_preds.2.2.bias - torch.Size([2]): 
Initialized by user-defined `init_weights` in YOLOv8HeadModule  

bbox_head.head_module.reg_preds.0.0.conv.weight - torch.Size([64, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.reg_preds.0.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.reg_preds.0.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.reg_preds.0.1.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.reg_preds.0.1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.reg_preds.0.1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.reg_preds.0.2.weight - torch.Size([64, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.reg_preds.0.2.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in YOLOv8HeadModule  

bbox_head.head_module.reg_preds.1.0.conv.weight - torch.Size([64, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.reg_preds.1.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.reg_preds.1.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.reg_preds.1.1.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.reg_preds.1.1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.reg_preds.1.1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.reg_preds.1.2.weight - torch.Size([64, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.reg_preds.1.2.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in YOLOv8HeadModule  

bbox_head.head_module.reg_preds.2.0.conv.weight - torch.Size([64, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.reg_preds.2.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.reg_preds.2.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.reg_preds.2.1.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.reg_preds.2.1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.reg_preds.2.1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.reg_preds.2.2.weight - torch.Size([64, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.reg_preds.2.2.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in YOLOv8HeadModule  
2023/09/29 11:48:32 - mmengine - INFO - Load checkpoint from /home/neau/sdb/ag-pro/leaf_model/checkpoint/yolov8_s_syncbn_fast_8xb16-500e_coco_20230117_180101-5aa5f0f1.pth
2023/09/29 11:48:32 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2023/09/29 11:48:32 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2023/09/29 11:48:32 - mmengine - INFO - Checkpoints will be saved to /home/neau/sdb/ag-pro/work_dirs/yolov8-s.
2023/09/29 11:49:10 - mmengine - INFO - Epoch(train)   [1][ 50/489]  base_lr: 1.0000e-02 lr: 3.3401e-04  eta: 2 days, 3:08:39  time: 0.7532  data_time: 0.0824  grad_norm: 293.9150  loss: 10.1858  loss_cls: 3.6822  loss_bbox: 3.6822  loss_dfl: 2.8214
2023/09/29 11:49:46 - mmengine - INFO - Epoch(train)   [1][100/489]  base_lr: 1.0000e-02 lr: 6.7485e-04  eta: 2 days, 2:11:24  time: 0.7254  data_time: 0.0190  grad_norm: 306.2035  loss: 10.0147  loss_cls: 3.5837  loss_bbox: 3.6603  loss_dfl: 2.7707
